/*
 * Shruti Kaur
 * ich524
 * 11339265
 */

#ifndef LIST_H
#define LIST_H

/* Reallocing moves memory arround unpredictably. So instead of using a list
 * pointer we will be using an index. */
typedef unsigned int LIST_HANDLE;
typedef unsigned int NODE_HANDLE;

typedef struct node {
    void *item;
    NODE_HANDLE next;
    NODE_HANDLE prev;
} NODE;

typedef struct list {
    NODE_HANDLE head;
    NODE_HANDLE tail;
    NODE_HANDLE cursor;
    unsigned int count;
} LIST;

/* Function prototypes */
LIST_HANDLE ListCreate();
unsigned int ListCount(LIST_HANDLE list);
void *ListFirst(LIST_HANDLE list);
void *ListLast(LIST_HANDLE list);
void *ListNext(LIST_HANDLE list);
void *ListPrev(LIST_HANDLE list);
void *ListCurr(LIST_HANDLE list);
int ListAdd(LIST_HANDLE list, void *item);
int ListInsert(LIST_HANDLE list, void *item);
int ListAppend(LIST_HANDLE list, void *item);
int ListPrepend(LIST_HANDLE list, void *item);
void *ListRemove(LIST_HANDLE list);
void ListConcat(LIST_HANDLE list1, LIST_HANDLE list2);
void ListFree(LIST_HANDLE list, void (*itemFree)(void *));
void *ListTrim(LIST_HANDLE list);
void *ListSearch(LIST_HANDLE list, int (*comparator)(void *, void *), 
void *comparisonArg);

#endif 

/*
 * Shruti Kaur
 * ich524
 * 11339265
 */

#include <stdlib.h>
#include <list.h>

#define MIN_LISTS 2
#define MIN_NODES 2

#define UNUSED 0xffffffff

/*
 * Allowed to use more than one array.
 *
 * Double pointer array is an acceptable solution: however, you will lose
 * marks.
 */

/*
 * Purpose: Retrieves a node from node_space, and allocates more memory if
 * there is not enough.
 * Preconditions: int i; NODE_HANDLE node; NODE * temp; must be declared 
 * Postconditions: node is set to an empty node, or NULL on failure
 */
#define NODECREATE(on_error) { \
    /* Allocate more memory if we don't have enough space. */ \
    node = UNUSED; \
    if (node_count >= MIN_LISTS) { \
        temp = (NODE *)realloc(node_space, \
                (MIN_NODES << (node_mult + 1)) * sizeof(NODE)); \
        if (!temp) { \
            return on_error; \
        } \
        node_space = temp;\
        node_mult++;\
    } \
    \
    for (i = 0; i < (unsigned int)(MIN_NODES << (node_count / MIN_NODES)) \
            ; i++) { \
        if (!(node_space+i)->item) { \
            node_count++; \
            \
            (node_space+i)->next = UNUSED; \
            (node_space+i)->prev = UNUSED; \
            \
            node = i; \
            break; \
        } \
    } \
}

/*
 * Purpose: Check if the amount of used lists is at or below half the capacity
 * of the allocated space.
 * Postcondition: if there are half or less of the lists used, halfs the
 * allocated space.
 */

LIST * list_space;
NODE * node_space;
unsigned int list_count, node_count, list_mult, node_mult;

/*
 * Purpose: initializes an empty List to be further used by other functions.
 * Returns: a list pointer or NULL on error
 */
LIST_HANDLE ListCreate() {
    LIST * temp;
    unsigned long i;
   
    if (!list_space) {
        list_space = (LIST *)malloc(MIN_LISTS * sizeof(LIST));
        if (!list_space) {
            return UNUSED;
        }
        for (i = 0; i < MIN_LISTS; i++) {
            (list_space+i)->count = UNUSED;
        }
        list_mult = 0;
        list_count = 0;
    }
   
    if (!node_space) {
        node_space = (NODE *)malloc(MIN_NODES * sizeof(NODE));
        if (!node_space) {
            free(list_space);
            list_space = NULL;
            return UNUSED;
        }
        for (i = 0; i < MIN_NODES; i++) {
            (node_space+i)->item = NULL;
        }
        node_mult = 0;
        node_count = 0;
    }
    
    /* We assign the return value of realloc to a temporary value first.
     * realloc will return NULL if we don't have enough memory BUT won't
     * delete the original pointer. */
    if (list_count >= (unsigned int)(MIN_LISTS << list_mult)) {
        temp = (LIST *)realloc(list_space,
                (MIN_LISTS << (list_mult + 1)) * sizeof(LIST));
        if (!temp) {
            return UNUSED;
        }
        list_space = temp;
        for (i = 0; i < (unsigned int)(MIN_LISTS << (list_mult)); i++) {
            (list_space+i+(MIN_LISTS << list_mult))->count = UNUSED;
        }
        list_mult++;
    }
   
    for (i = 0; i < (unsigned int)(MIN_LISTS << (list_mult)); i++) {
        if ((list_space+i)->count == UNUSED) {
            list_count++;

            /* clear out list */
            (list_space+i)->head = UNUSED;
            (list_space+i)->tail = UNUSED;
            (list_space+i)->cursor = UNUSED;
            (list_space+i)->count = 0;

            return i;
        }
    }

    return UNUSED;
}

/*
 * Purpose: inserts an item into the list before the current item
 * Returns: 0 on success, -1 on failure
 */
int ListInsert(LIST_HANDLE list, void *item) {
    NODE * temp;
    NODE_HANDLE node, cursor;
    unsigned int i;

    if (list == UNUSED) {
        return -1;
    }
    if (!item) {
        return -1;
    }

    NODECREATE(-1);
    (node_space+node)->item = item;
    
    cursor = (list_space+list)->cursor;

    if ((list_space+list)->count == 0) {
       (list_space+list)->head = node;
       (list_space+list)->tail = node;
       (list_space+list)->cursor = node;
       (list_space+list)->count++;
       return 0;
    }
   
    (node_space+node)->prev = (list_space+list)->cursor;
    if ((node_space+cursor)->next == UNUSED) {
        (node_space+cursor)->next = node;
        (list_space+list)->tail = node;
    } else {
        (node_space+(node_space+cursor)->next)->prev = node;
        (node_space+node)->next = (node_space+cursor)->next;
        (node_space+cursor)->next = node;
    }
    (list_space+list)->cursor = node;
    (list_space+list)->count++;
   
    return 0;
}

/*
 * Purpose: inserts an item into the list after the current item
 * Returns: 0 on success, -1 on failure
 */
int ListAdd(LIST_HANDLE list, void *item) {
    NODE * temp;
    NODE_HANDLE node, cursor;
    unsigned int i;

    if (list == UNUSED) {
        return -1;
    }
    if (!item) {
        return -1;
    }

    NODECREATE(-1);

    (node_space+node)->item = item;
    cursor = (list_space+list)->cursor;

    if ((list_space+list)->count == 0) {
        (list_space+list)->head = node;
        (list_space+list)->tail = node;
        (list_space+list)->cursor = node;
        (list_space+list)->count++;
        return 0;
    }

    (node_space+node)->next = (list_space+list)->cursor;
    if ((node_space+cursor)->prev == UNUSED) {
        (node_space+cursor)->prev = node;
        (list_space+list)->head = node;
    } else {
        (node_space+(node_space+cursor)->prev)->next = node;
        (node_space+node)->prev = (node_space+cursor)->prev;
        (node_space+cursor)->prev = node;
    }
    (list_space+list)->cursor = node;
    (list_space+list)->count++;

    return 0;
}

/*
 * Purpose: appends an item to the end of the list
 * Returns: 0 on success, -1 on failure
 */
int ListAppend(LIST_HANDLE list, void *item) {
    NODE * temp;
    NODE_HANDLE node;
    unsigned int i;

    if (list == UNUSED) {
        return -1;
    }
    if (!item) {
        return -1;
    }

    NODECREATE(-1);

    (node_space+node)->item = item;

    if ((list_space+list)->count == 0) {
        (list_space+list)->head = node;
        (list_space+list)->tail = node;
        (list_space+list)->cursor = node;
        (list_space+list)->count++;
        return 0;
    }
   
    (node_space+((list_space+list)->tail))->next = node;
    (node_space+node)->prev = (list_space+list)->tail;
    (list_space+list)->tail = node;
    (list_space+list)->cursor = node;
    (list_space+list)->count++;

    return 0;
}

/*
 * Purpose: prepends an item to the start of the list
 * Returns: 0 on success, -1 on failure
 */
int ListPrepend(LIST_HANDLE list, void *item) {
    NODE * temp;
    NODE_HANDLE node;
    unsigned int i;

    if (list == UNUSED) {
        return -1;
    }
    if (!item) {
        return -1;
    }

    NODECREATE(-1);

    (node_space+node)->item = item;

    if ((list_space+list)->count == 0) {
       (list_space+list)->head = node;
       (list_space+list)->tail = node;
       (list_space+list)->cursor = node;
       (list_space+list)->count++;
       return 0;
    }

    (node_space+(list_space+list)->head)->prev = node;
    (node_space+node)->next = (list_space+list)->head;
    (list_space+list)->head = node;
    (list_space+list)->cursor = node;
    (list_space+list)->count++;

    return 0;
}

/*
 * Purpose: adds list2 to the end of list1
 * Postconditions: list2 is destroyed
 * Note: List memory will not be reduced in this function until Phase 3.
 *       Only increasing memory is required for Phase 2.
 */
void ListConcat(LIST_HANDLE list1, LIST_HANDLE list2) {
    if (list1 == UNUSED) {
        return;
    }
    if (list2 == UNUSED) {
        return;
    }
    /* We allow the concatenation of empty lists.*/
    if ((list_space+list2)->count == 0) {
        (list_space+list2)->count = UNUSED;
        return;
    }
    /* In the event list1 is empty and list2 is not, copy list2 into list1,
     * and free it.*/
    if ((list_space+list1)->count == 0) {
        (list_space+list1)->head = (list_space+list2)->head;
        (list_space+list1)->tail = (list_space+list2)->tail;
        (list_space+list1)->cursor =(list_space+list2)->cursor;
        (list_space+list1)->count = (list_space+list2)->count;
        (list_space+list2)->count = UNUSED;
        return;
    }

    (node_space+(list_space+list1)->tail)->next = (list_space+list2)->head;
    (node_space+(list_space+list2)->head)->prev = (list_space+list1)->tail;
    (list_space+list1)->tail = (list_space+list2)->tail;
    (list_space+list1)->count += (list_space+list2)->count;
    
    (list_space+list2)->count = UNUSED;
    list_count--;
    /* TODO: add list_count check (macro?) to reduce memory for Phase 3. */
    

    return;
}
/*
 * Shruti Kaur
 * ich524
 * 11339265
 */


#include <list.h>
#include <stddef.h>

#define UNUSED 0xffffffff

extern LIST * list_space;
extern NODE * node_space;

/* For resizing double pointer. */
/* algolist.net/Data_structures/Hash_table/Dynamic_resizing */

/*
 * Purpose: counts the number of items in the list
 * Returns: the number of items in the list
 */
unsigned int ListCount(LIST_HANDLE list) {
    if (list == UNUSED) {
        return UNUSED;
    }
    return (list_space+list)->count;
}

/*
 * Purpose: provides a pointer to the first item of the list
 * Effects: the current item becomes the first item
 * Returns: a pointer to the first item of the list
 */
void *ListFirst(LIST_HANDLE list) {
    if (list == UNUSED) {
        return NULL;
    }
    (list_space+list)->cursor = (list_space+list)->head;
    return (node_space+(list_space+list)->head)->item;
}

/*
 * Purpose: provides a pointer to the last item of the list
 * Effects: the current item becomes the last item
 * Returns: a pointer to the last item of the list
 */
void *ListLast(LIST_HANDLE list) {
    if (list == UNUSED) {
        return NULL;
    }
    (list_space+list)->cursor = (list_space+list)->tail;
    return (node_space+(list_space+list)->tail)->item;
}

/*
 * Purpose: provides a pointer to the item next to the current item
 * Effects: the current item becomes the item next to it
 * Returns: a pointer to the item next to the current item
 */
void *ListNext(LIST_HANDLE list) {
    if (list == UNUSED) {
        return NULL;
    }
    if ((list_space+list)->cursor == (list_space+list)->tail) {
        return NULL;
    }
    (list_space+list)->cursor = (node_space+(list_space+list)->cursor)->next;
    return (node_space+(list_space+list)->cursor)->item;

}

/*
 * Purpose: provides a pointer to the item previous to the current item
 * Effects: the current item becomes the item previous to it
 * Returns: a pointer to the item previous to the current item
 */
void *ListPrev(LIST_HANDLE list) {
    if (list == UNUSED) {
        return NULL;
    }
    if ((list_space+list)->cursor == (list_space+list)->head) {
        return NULL;
    }
    (list_space+list)->cursor = (node_space+(list_space+list)->cursor)->prev;
    return (node_space+(list_space+list)->cursor)->item;
}

/*
 * Purpose: provides a pointer to the current item
 * Returns: a pointer to the current item
 */
void *ListCurr(LIST_HANDLE list) {
    if (list == UNUSED) {
        return NULL;
    }
    return (node_space+(list_space+list)->cursor)->item;
}

/* 
 * Purpose: searchs the list for comparisonArg using the comparator function
 * Effects: current item becomes the found item, or is set to the last item
 * Returns: a pointer to the item if found, else NULL
 */
void *ListSearch(LIST_HANDLE list, 
	int (*comparator)(void *, void *), 
	void *comparisonArg) {
    unsigned int i;
    if (list == UNUSED) {
        return NULL;
    }
    if (!comparator) {
        return NULL;
    }
    if (!comparisonArg) {
        return NULL;
    }
    if ((list_space+list)->count == 0) {
        return NULL;
    }
    (list_space+list)->cursor = (list_space+list)->head;
    for (i = 0; i < (list_space+list)->count; i++) {
        if (comparator(comparisonArg, (node_space+(list_space+list)->cursor)->item)) {
            return (node_space+(list_space+list)->cursor)->item; 
        }
        (list_space+list)->cursor = 
            (node_space+(list_space+list)->cursor)->next;
    }

    return NULL;
}
/*
 * Shruti Kaur
 * ich524
 * 11339265
 */


#include <stddef.h>
#include <list.h>

#define UNUSED 0xffffffff

extern LIST * list_space;
extern unsigned int list_count;
extern NODE * node_space;
extern unsigned int node_count;


/*
 * Purpose: pops the current item from the list
 * Effects: current item becomes it's next item
 * Returns: a pointer to the current item
 */
void *ListRemove(LIST_HANDLE list) {
    void * item;
    NODE_HANDLE node;
    if (list == UNUSED) {
        return NULL;
    }
    if ((list_space+list)->count == 0) {
        return NULL;
    }
    item = (node_space+(list_space+list)->cursor)->item;
    if ((list_space+list)->count == 1) {
        (list_space+list)->head = UNUSED;
        (list_space+list)->tail = UNUSED;
        (list_space+list)->cursor = UNUSED;
        (list_space+list)->count = 0;
        return item;
    };
    node = (node_space+(list_space+list)->cursor)->prev;
    if (!((list_space+list)->cursor == (list_space+list)->head)) {
        (node_space+node)->next = (node_space+(list_space+list)->cursor)->next;
    }
    if (!((list_space+list)->cursor == (list_space+list)->tail)) {
        (node_space+(node_space+(list_space+list)->cursor)->next)->prev = node;
    }

    (node_space+(list_space+list)->cursor)->item = NULL;
    node_count--;

    return item;
}

/*
 * Purpose: deletes the list, itemFree is used to delete individual items
 */
void ListFree(LIST_HANDLE list, void (*itemFree)(void *)) {
    NODE_HANDLE node;
    if (list == UNUSED) {
        return;
    }
    if (!itemFree) {
        return;
    }
    node = (list_space+list)->head;
    while (node != UNUSED) {
        itemFree((node_space+node)->item);
        (node_space+node)->item = NULL;
        node_count--;
        node = (node_space+node)->next;
    }
    (list_space+list)->count = UNUSED;
    list_count--;

    return;
}

/*
 * Purpose: pops the item from the end of the list
 * Effects: the current item is set to the new last item
 * Returns: a pointer to this item
 */
void *ListTrim(LIST_HANDLE list) {
    void * item;
    NODE_HANDLE node;
    if (list == UNUSED) {
        return NULL;
    }
    if ((list_space+list)->count == 0) {
        return NULL;
    }
    item = (node_space+(list_space+list)->tail)->item;
    if ((list_space+list)->count == 1) {
        (list_space+list)->head = UNUSED;
        (list_space+list)->tail = UNUSED;
        (list_space+list)->cursor = UNUSED;
        (list_space+list)->count = 0;
        return item;
    };
    node = (node_space+(list_space+list)->tail)->prev;
    (node_space+node)->next = (node_space+(list_space+list)->tail)->next;

    (node_space+(list_space+list)->tail)->item = NULL;
    node_count--;

    return item;
}
/*
 * Shruti Kaur
 * ich524
 * 11339265
 */

/*
 * Lab 6: Scheduler Simulator
 * CMPT 332 Fall 2018
 * University of Saskatchewan
 */

#include <stdio.h>

#include <os.h>
#include <list.h> /* Adding this list.h to our function header*/

#define SCHEDULER_QUANTUM 25

#define BLOCK_MAXIMUM 50
#define BLOCK_CHANCE 3
#define WORK_MAXIMUM 50

void panic(const char *msg) {
    fprintf(stderr, "[PANIC] %s\n", msg);
    exit(1);
}

void error(const char *msg) {
    fprintf(stderr, "[ERROR] %s\n", msg);
}

enum pstate {NONE, RUNNING, RUNNABLE, BLOCKING};

struct proc {
    PID pid;
    enum pstate state;
    int priority;
};

static int ncpu;

static struct {
    int mutex;
    int running;
    struct proc *procs;
    size_t size;
} ptable;

static PID scheduler_pid;

/* Returns the next process to run or NULL if there is nothing runnable */
struct proc *next_proc() {
    struct proc *p;

    /* TODO: reimplement as a priority scheduler */
    for (p = ptable.procs; p < &ptable.procs[ptable.size]; p++) {
        if (p->state != RUNNABLE) continue;
        return p;
    }

    return NULL;
}

/* Scheduler entrypoint */
void scheduler(void *arg) {
    struct proc *p;

    for (;;) {
        if (P(ptable.mutex)) panic("invalid ptable mutex");

        while (ptable.running < ncpu) {
            p = next_proc();
            if (!p) break;
            if (Resume(p->pid)) continue;
            p->state = RUNNING;
            ptable.running += 1;
        }

        if (V(ptable.mutex)) panic("invalid ptable mutex");

        Sleep(SCHEDULER_QUANTUM);
    }
}

/* Sets the process state */
void set_state(enum pstate state) {
    PID pid;
    struct proc *p;
    
    /* Creating a queue to add it into our running queue */
    LIST_HANDLE runningq = ListCreate();
 
    pid = MyPid();

    if (state == RUNNING && pid != scheduler_pid)
        panic("only the scheduler can set things to running!");

    if (P(ptable.mutex)) panic("invalid ptable mutex");

    for (p = ptable.procs; p < &ptable.procs[ptable.size]; p++) {
        if (p->pid != pid) continue;

        /* Don't do anything because it's not going to change... */
        if (p->state == state) break;

        if (p->state == RUNNING) {
            ptable.running -= 1;
        }

        if (state == RUNNABLE) {
            /* Adding it to the runnable queue */
	    ListAdd(runningq, *state); 
        }

        p->state = state;
        break;
    }

    if (V(ptable.mutex)) panic("invalid ptable mutex");
}

/* Returns the priority of the calling process */
int get_priority() {
    PID pid;
    struct proc *p;
    int priority = -1;

    pid = MyPid();

    if (P(ptable.mutex)) panic("invalid ptable mutex");

    for (p = ptable.procs; p < &ptable.procs[ptable.size]; p++) {
        if (p->pid != pid) continue;
        priority = p->priority;
        break;
    }

    if (V(ptable.mutex)) panic("invalid ptable mutex");

    return priority;
}

/* Causes the running process to yield to others */
void yield() {
    set_state(RUNNABLE);
    Suspend();
}

/* Simulates a blocking call */
void block(unsigned int time) {
    set_state(BLOCKING);
    Sleep(time);
    yield();
}

/* Process entry point */
void process(void *arg) {
    char *name = (char *) arg;

    set_state(RUNNABLE);
    /* We need to wait for the scheduler to let us start. */
    Suspend();

    for (;;) {
        if (rand() % BLOCK_CHANCE == 0) {
            printf("%s is start block.\n", name);
            block(rand() % BLOCK_MAXIMUM);
            printf("%s is done blocking.\n", name);
        } else {
            printf("%s is running. (priority %d)\n", name, get_priority());
            Sleep(rand() % WORK_MAXIMUM);
            yield();
        }
    }
}

int mainp(int argc, char **argv) {
    PID pid;
    char *name;
    int i;
    struct proc *p;

    srand(0);

    if (argc != 3) {
        printf("usage: %s nproc ncpu\n", argv[0]);
        exit(1);
    }

    ptable.size = atoi(argv[1]);
    if (ptable.size <= 0) {
        printf("nproc must be greater than 0\n");
        exit(1);
    }

    ncpu = atoi(argv[2]);
    if (ncpu <= 0) {
        printf("ncpu must be greater than 0\n");
        exit(1);
    }

    ptable.running = 0;
    ptable.procs = calloc(sizeof(struct proc), ptable.size);
    if (ptable.procs == NULL) {
        panic("Unable to allocate ptable.");
    }

    ptable.mutex = NewSem(1);
    if (ptable.mutex == -1) {
        panic("Unable to create semaphore for ptable.");
    }

    scheduler_pid = Create(scheduler, 4096, "scheduler", NULL, HIGH, USR);
    if (scheduler_pid == PNUL) {
        panic("Unable to create scheduler thread.");
    }

    for (i = 0; i < ptable.size; i++) {
        name = malloc(32);
        if (name == NULL) {
            panic("Unable to allocate memory for name");
        }
        sprintf(name, "process_%d", i);

        pid = Create(process, 4096, name, name, NORM, USR);
        if (pid == PNUL) {
            panic("Unable to create thread for process.");
        }

        p = &ptable.procs[i];
        p->pid = pid;
        p->state = NONE;
        p->priority = rand() % 5;
    }

    return 0;
}
