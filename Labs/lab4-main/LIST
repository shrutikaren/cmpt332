#ifndef LIST_H
#define LIST_H

/* Reallocing moves memory arround unpredictably. So instead of using a list
 * pointer we will be using an index. */
typedef unsigned int LIST_HANDLE;
typedef unsigned int NODE_HANDLE;

typedef struct node {
    void *item;
    NODE_HANDLE next;
    NODE_HANDLE prev;
} NODE;

typedef struct list {
    NODE_HANDLE head;
    NODE_HANDLE tail;
    NODE_HANDLE cursor;
    unsigned int count;
} LIST;

/* Function prototypes */
LIST_HANDLE ListCreate();
unsigned int ListCount(LIST_HANDLE list);
void *ListFirst(LIST_HANDLE list);
void *ListLast(LIST_HANDLE list);
void *ListNext(LIST_HANDLE list);
void *ListPrev(LIST_HANDLE list);
void *ListCurr(LIST_HANDLE list);
int ListAdd(LIST_HANDLE list, void *item);
int ListInsert(LIST_HANDLE list, void *item);
int ListAppend(LIST_HANDLE list, void *item);
int ListPrepend(LIST_HANDLE list, void *item);
void *ListRemove(LIST_HANDLE list);
void ListConcat(LIST_HANDLE list1, LIST_HANDLE list2);
void ListFree(LIST_HANDLE list, void (*itemFree)(void *));
void *ListTrim(LIST_HANDLE list);
void *ListSearch(LIST_HANDLE list, int (*comparator)(void *, void *), 
void *comparisonArg);

#endif 

#include <stdlib.h>
#include "list.h"

#define MIN_LISTS 2
#define MIN_NODES 2

#define UNUSED 0xffffffff

/*
 * Allowed to use more than one array.
 *
 * Double pointer array is an acceptable solution: however, you will lose
 * marks.
 */

/*
 * Purpose: Retrieves a node from node_space, and allocates more memory if
 * there is not enough.
 * Preconditions: int i; NODE_HANDLE node; NODE * temp; must be declared 
 * Postconditions: node is set to an empty node, or NULL on failure
 */
#define NODECREATE(on_error) { \
    /* Allocate more memory if we don't have enough space. */ \
    node = UNUSED; \
    if (node_count >= MIN_LISTS) { \
        temp = (NODE *)realloc(node_space, \
                (MIN_NODES << (node_mult + 1)) * sizeof(NODE)); \
        if (!temp) { \
            return on_error; \
        } \
        node_space = temp;\
        node_mult++;\
    } \
    \
    for (i = 0; i < (unsigned int)(MIN_NODES << (node_count / MIN_NODES)) \
            ; i++) { \
        if (!(node_space+i)->item) { \
            node_count++; \
            \
            (node_space+i)->next = UNUSED; \
            (node_space+i)->prev = UNUSED; \
            \
            node = i; \
            break; \
        } \
    } \
}


LIST * list_space;
NODE * node_space;
unsigned int list_count, node_count, list_mult, node_mult;

/*
 * Purpose: initializes an empty List to be further used by other functions.
 * Returns: a list pointer or NULL on error
 */
LIST_HANDLE ListCreate() {
    LIST * temp;
    unsigned long i;
   
    if (!list_space) {
        list_space = (LIST *)malloc(MIN_LISTS * sizeof(LIST));
        if (!list_space) {
            return UNUSED;
        }
        for (i = 0; i < MIN_LISTS; i++) {
            (list_space+i)->count = UNUSED;
        }
        list_mult = 0;
        list_count = 0;
    }
   
    if (!node_space) {
        node_space = (NODE *)malloc(MIN_NODES * sizeof(NODE));
        if (!node_space) {
            free(list_space);
            list_space = NULL;
            return UNUSED;
        }
        for (i = 0; i < MIN_NODES; i++) {
            (node_space+i)->item = NULL;
        }
        node_mult = 0;
        node_count = 0;
    }
    
    /* We assign the return value of realloc to a temporary value first.
     * realloc will return NULL if we don't have enough memory BUT won't
     * delete the original pointer. */
    if (list_count >= (unsigned int)(MIN_LISTS << list_mult)) {
        temp = (LIST *)realloc(list_space,
                (MIN_LISTS << (list_mult + 1)) * sizeof(LIST));
        if (!temp) {
            return UNUSED;
        }
        list_space = temp;
        for (i = 0; i < (unsigned int)(MIN_LISTS << (list_mult)); i++) {
            (list_space+i+(MIN_LISTS << list_mult))->count = UNUSED;
        }
        list_mult++;
    }
   
    for (i = 0; i < (unsigned int)(MIN_LISTS << (list_mult)); i++) {
        if ((list_space+i)->count == UNUSED) {
            list_count++;

            /* clear out list */
            (list_space+i)->head = UNUSED;
            (list_space+i)->tail = UNUSED;
            (list_space+i)->cursor = UNUSED;
            (list_space+i)->count = 0;

            return i;
        }
    }

    return UNUSED;
}

/*
 * Purpose: inserts an item into the list before the current item
 * Returns: 0 on success, -1 on failure
 */
int ListInsert(LIST_HANDLE list, void *item) {
    NODE * temp;
    NODE_HANDLE node, cursor;
    unsigned int i;

    if (list == UNUSED) {
        return -1;
    }
    if (!item) {
        return -1;
    }

    NODECREATE(-1);
    (node_space+node)->item = item;
    
    cursor = (list_space+list)->cursor;

    if ((list_space+list)->count == 0) {
       (list_space+list)->head = node;
       (list_space+list)->tail = node;
       (list_space+list)->cursor = node;
       (list_space+list)->count++;
       return 0;
    }
   
    (node_space+node)->prev = (list_space+list)->cursor;
    if ((node_space+cursor)->next == UNUSED) {
        (node_space+cursor)->next = node;
        (list_space+list)->tail = node;
    } else {
        (node_space+(node_space+cursor)->next)->prev = node;
        (node_space+node)->next = (node_space+cursor)->next;
        (node_space+cursor)->next = node;
    }
    (list_space+list)->cursor = node;
    (list_space+list)->count++;
   
    return 0;
}

/*
 * Purpose: inserts an item into the list after the current item
 * Returns: 0 on success, -1 on failure
 */
int ListAdd(LIST_HANDLE list, void *item) {
    NODE * temp;
    NODE_HANDLE node, cursor;
    unsigned int i;

    if (list == UNUSED) {
        return -1;
    }
    if (!item) {
        return -1;
    }

    NODECREATE(-1);

    (node_space+node)->item = item;
    cursor = (list_space+list)->cursor;

    if ((list_space+list)->count == 0) {
        (list_space+list)->head = node;
        (list_space+list)->tail = node;
        (list_space+list)->cursor = node;
        (list_space+list)->count++;
        return 0;
    }

    (node_space+node)->next = (list_space+list)->cursor;
    if ((node_space+cursor)->prev == UNUSED) {
        (node_space+cursor)->prev = node;
        (list_space+list)->head = node;
    } else {
        (node_space+(node_space+cursor)->prev)->next = node;
        (node_space+node)->prev = (node_space+cursor)->prev;
        (node_space+cursor)->prev = node;
    }
    (list_space+list)->cursor = node;
    (list_space+list)->count++;

    return 0;
}

/*
 * Purpose: appends an item to the end of the list
 * Returns: 0 on success, -1 on failure
 */
int ListAppend(LIST_HANDLE list, void *item) {
    NODE * temp;
    NODE_HANDLE node;
    unsigned int i;

    if (list == UNUSED) {
        return -1;
    }
    if (!item) {
        return -1;
    }

    NODECREATE(-1);

    (node_space+node)->item = item;

    if ((list_space+list)->count == 0) {
        (list_space+list)->head = node;
        (list_space+list)->tail = node;
        (list_space+list)->cursor = node;
        (list_space+list)->count++;
        return 0;
    }
   
    (node_space+((list_space+list)->tail))->next = node;
    (node_space+node)->prev = (list_space+list)->tail;
    (list_space+list)->tail = node;
    (list_space+list)->cursor = node;
    (list_space+list)->count++;

    return 0;
}

/*
 * Purpose: prepends an item to the start of the list
 * Returns: 0 on success, -1 on failure
 */
int ListPrepend(LIST_HANDLE list, void *item) {
    NODE * temp;
    NODE_HANDLE node;
    unsigned int i;

    if (list == UNUSED) {
        return -1;
    }
    if (!item) {
        return -1;
    }

    NODECREATE(-1);

    (node_space+node)->item = item;

    if ((list_space+list)->count == 0) {
       (list_space+list)->head = node;
       (list_space+list)->tail = node;
       (list_space+list)->cursor = node;
       (list_space+list)->count++;
       return 0;
    }

    (node_space+(list_space+list)->head)->prev = node;
    (node_space+node)->next = (list_space+list)->head;
    (list_space+list)->head = node;
    (list_space+list)->cursor = node;
    (list_space+list)->count++;

    return 0;
}

/*
 * Purpose: adds list2 to the end of list1
 * Postconditions: list2 is destroyed
 * Note: List memory will not be reduced in this function until Phase 3.
 *       Only increasing memory is required for Phase 2.
 */
void ListConcat(LIST_HANDLE list1, LIST_HANDLE list2) {
    if (list1 == UNUSED) {
        return;
    }
    if (list2 == UNUSED) {
        return;
    }
    /* We allow the concatenation of empty lists.*/
    if ((list_space+list2)->count == 0) {
        (list_space+list2)->count = UNUSED;
        return;
    }
    /* In the event list1 is empty and list2 is not, copy list2 into list1,
     * and free it.*/
    if ((list_space+list1)->count == 0) {
        (list_space+list1)->head = (list_space+list2)->head;
        (list_space+list1)->tail = (list_space+list2)->tail;
        (list_space+list1)->cursor =(list_space+list2)->cursor;
        (list_space+list1)->count = (list_space+list2)->count;
        (list_space+list2)->count = UNUSED;
        return;
    }

    (node_space+(list_space+list1)->tail)->next = (list_space+list2)->head;
    (node_space+(list_space+list2)->head)->prev = (list_space+list1)->tail;
    (list_space+list1)->tail = (list_space+list2)->tail;
    (list_space+list1)->count += (list_space+list2)->count;
    
    (list_space+list2)->count = UNUSED;
    list_count--;
    /* TODO: add list_count check (macro?) to reduce memory for Phase 3. */
    

    return;
}
#include <list.h>
#include <stddef.h>

#define UNUSED 0xffffffff

extern LIST * list_space;
extern NODE * node_space;

/* For resizing double pointer. */
/* algolist.net/Data_structures/Hash_table/Dynamic_resizing */

/*
 * Purpose: counts the number of items in the list
 * Returns: the number of items in the list
 */
unsigned int ListCount(LIST_HANDLE list) {
    if (list == UNUSED) {
        return UNUSED;
    }
    return (list_space+list)->count;
}

/*
 * Purpose: provides a pointer to the first item of the list
 * Effects: the current item becomes the first item
 * Returns: a pointer to the first item of the list
 */
void *ListFirst(LIST_HANDLE list) {
    if (list == UNUSED) {
        return NULL;
    }
    (list_space+list)->cursor = (list_space+list)->head;
    return (node_space+(list_space+list)->head)->item;
}

/*
 * Purpose: provides a pointer to the last item of the list
 * Effects: the current item becomes the last item
 * Returns: a pointer to the last item of the list
 */
void *ListLast(LIST_HANDLE list) {
    if (list == UNUSED) {
        return NULL;
    }
    (list_space+list)->cursor = (list_space+list)->tail;
    return (node_space+(list_space+list)->tail)->item;
}

/*
 * Purpose: provides a pointer to the item next to the current item
 * Effects: the current item becomes the item next to it
 * Returns: a pointer to the item next to the current item
 */
void *ListNext(LIST_HANDLE list) {
    if (list == UNUSED) {
        return NULL;
    }
    if ((list_space+list)->cursor == (list_space+list)->tail) {
        return NULL;
    }
    (list_space+list)->cursor = (node_space+(list_space+list)->cursor)->next;
    return (node_space+(list_space+list)->cursor)->item;

}

/*
 * Purpose: provides a pointer to the item previous to the current item
 * Effects: the current item becomes the item previous to it
 * Returns: a pointer to the item previous to the current item
 */
void *ListPrev(LIST_HANDLE list) {
    if (list == UNUSED) {
        return NULL;
    }
    if ((list_space+list)->cursor == (list_space+list)->head) {
        return NULL;
    }
    (list_space+list)->cursor = (node_space+(list_space+list)->cursor)->prev;
    return (node_space+(list_space+list)->cursor)->item;
}

/*
 * Purpose: provides a pointer to the current item
 * Returns: a pointer to the current item
 */
void *ListCurr(LIST_HANDLE list) {
    if (list == UNUSED) {
        return NULL;
    }
    return (node_space+(list_space+list)->cursor)->item;
}

/* 
 * Purpose: searchs the list for comparisonArg using the comparator function
 * Effects: current item becomes the found item, or is set to the last item
 * Returns: a pointer to the item if found, else NULL
 */
void *ListSearch(LIST_HANDLE list, 
	int (*comparator)(void *, void *), 
	void *comparisonArg) {
    unsigned int i;
    if (list == UNUSED) {
        return NULL;
    }
    if (!comparator) {
        return NULL;
    }
    if (!comparisonArg) {
        return NULL;
    }
    if ((list_space+list)->count == 0) {
        return NULL;
    }
    (list_space+list)->cursor = (list_space+list)->head;
    for (i = 0; i < (list_space+list)->count; i++) {
        if (comparator(comparisonArg, (node_space+(list_space+list)->cursor)->item)) {
            return (node_space+(list_space+list)->cursor)->item; 
        }
        (list_space+list)->cursor = 
            (node_space+(list_space+list)->cursor)->next;
    }

    return NULL;
}

#include <stddef.h>
#include <list.h>

#define UNUSED 0xffffffff

extern LIST * list_space;
extern unsigned int list_count;
extern NODE * node_space;
extern unsigned int node_count;


/*
 * Purpose: pops the current item from the list
 * Effects: current item becomes it's next item
 * Returns: a pointer to the current item
 */
void *ListRemove(LIST_HANDLE list) {
    void * item;
    NODE_HANDLE node;
    if (list == UNUSED) {
        return NULL;
    }
    if ((list_space+list)->count == 0) {
        return NULL;
    }
    item = (node_space+(list_space+list)->cursor)->item;
    if ((list_space+list)->count == 1) {
        (list_space+list)->head = UNUSED;
        (list_space+list)->tail = UNUSED;
        (list_space+list)->cursor = UNUSED;
        (list_space+list)->count = 0;
        return item;
    };
    node = (node_space+(list_space+list)->cursor)->prev;
    if (!((list_space+list)->cursor == (list_space+list)->head)) {
        (node_space+node)->next = (node_space+(list_space+list)->cursor)->next;
    }
    if (!((list_space+list)->cursor == (list_space+list)->tail)) {
        (node_space+(node_space+(list_space+list)->cursor)->next)->prev = node;
    }

    (node_space+(list_space+list)->cursor)->item = NULL;
    node_count--;

    return item;
}

/*
 * Purpose: deletes the list, itemFree is used to delete individual items
 */
void ListFree(LIST_HANDLE list, void (*itemFree)(void *)) {
    NODE_HANDLE node;
    if (list == UNUSED) {
        return;
    }
    if (!itemFree) {
        return;
    }
    node = (list_space+list)->head;
    while (node != UNUSED) {
        itemFree((node_space+node)->item);
        (node_space+node)->item = NULL;
        node_count--;
        node = (node_space+node)->next;
    }
    (list_space+list)->count = UNUSED;
    list_count--;

    return;
}

/*
 * Purpose: pops the item from the end of the list
 * Effects: the current item is set to the new last item
 * Returns: a pointer to this item
 */
void *ListTrim(LIST_HANDLE list) {
    void * item;
    NODE_HANDLE node;
    if (list == UNUSED) {
        return NULL;
    }
    if ((list_space+list)->count == 0) {
        return NULL;
    }
    item = (node_space+(list_space+list)->tail)->item;
    if ((list_space+list)->count == 1) {
        (list_space+list)->head = UNUSED;
        (list_space+list)->tail = UNUSED;
        (list_space+list)->cursor = UNUSED;
        (list_space+list)->count = 0;
        return item;
    };
    node = (node_space+(list_space+list)->tail)->prev;
    (node_space+node)->next = (node_space+(list_space+list)->tail)->next;

    (node_space+(list_space+list)->tail)->item = NULL;
    node_count--;

    return item;
}

#ifndef MONITOR_H
#define MONITOR_H

/* Including necessary libraries */
#include <stdio.h>
#include <stdlib.h>
#include <rtthreads.h>
#include <list.h>

/* Picked an arbitarily number */
#define k 5 

/* Variable to run server. */
#define RUN_SERVER 1

/* Define constants for message types */
#define ENTER_MSG 0
#define LEAVE_MSG 1
#define WAIT_MSG 2
#define SIGNAL_MSG 3

/* Loggin Errors in our code. */

#define LOG_ERROR(msg) do {                             \
    fprintf(stderr, "Log [Error] - %s: %s at %s:%d\n",  \
        msg, strerror(errno), __FILE__, __LINE__);      \
    exit(EXIT_FAILURE);                                 \
}while(0)

/* Define a struct for Condition Variables */
typedef struct ConditionVariables {
    int semaphores;
    LIST* waitlist;  /* List of threads waiting on this CV */
} ConditionVariables;

/* Define a struct for the Monitor */
typedef struct Monitor {
    int lock;           /* Used as a mutex */
    int entrysem;       /* Semaphore for entry */
    LIST* urgentq;      /* Urgent queue */
    LIST* enterq;       /* Enter queue */
    ConditionVariables conVars[k];  /* Array of condition variables */
} Monitor;

/* Function prototypes */
void RttMonInit();
void RttMonEnter();
void RttMonLeave();
void RttMonWait(int cv);
void RttMonSignal(int cv);
void MonServer();

#endif /* MONITOR_H */
/*# Dwight Makaroff   */
/*# student number    */
/*# nsid              */
/*# November 7, 2008  */
/* modified to use RT-Threads October 2018 */

#include <stdio.h>

#include <rtthreads.h>
#include <RttCommon.h>

#include <reader-writer-monitor.h>

#define SLEEPMAX 20
#define STKSIZE 65536

RTTTHREAD reader(void *arg)
{
  long myId;
  myId = (long) arg;
  
  for(;;)
    {
      printf("%ld start read\n", myId);
      StartRead();
      printf("%ld Reading\n", myId);
      RttSleep((int) (rand() % SLEEPMAX));
      StopRead();
      printf("%ld stop read\n", myId);
      RttSleep((int) (rand() % SLEEPMAX));
    }
}

RTTTHREAD writer(void *arg)
{
  long myId;
  myId = (long) arg;
  
  for(;;)
    {
      printf("%ld start write\n", myId);
      StartWrite();
      printf("%ld writing\n", myId);
      RttSleep((int) (rand() % SLEEPMAX*5));
      StopWrite();
      printf("%ld stop write\n", myId);
      RttSleep((int) (rand() % SLEEPMAX*6));
    }
}

int mainp()
{
  int temp, temp2, temp3;
  RttSchAttr 	attr;
  RttThreadId	reader1Pid, reader2Pid, reader3Pid;
  RttThreadId	writer1Pid, writer2Pid;

  attr.startingtime = RTTZEROTIME;
  attr.priority = RTTNORM;
  attr.deadline = RTTNODEADLINE;

  setbuf(stdout, 0);

  srand(71);
  Initialize();
  temp = RttCreate(&reader1Pid, (void(*)()) reader,STKSIZE,"R1", (void *) 1000, 
		      attr, RTTUSR );
  if (temp == RTTFAILED) perror("RttCreate");

  temp2 = RttCreate(&writer1Pid, (void(*)()) writer,STKSIZE,"W1", (void *) 500,
		    attr, RTTUSR );
  if (temp2 == RTTFAILED) perror("RttCreate");
  temp3 = RttCreate(&reader2Pid, (void(*)()) reader,STKSIZE,"R2", (void *) 1001,
		       attr, RTTUSR );
  if (temp3 == RTTFAILED) perror("RttCreate");
  temp3 = RttCreate(&reader3Pid, (void(*)()) reader,STKSIZE,"R3", (void *) 1002,
		    attr, RTTUSR );
  if (temp3 == RTTFAILED) perror("RttCreate");
  temp3 = RttCreate(&writer2Pid, (void(*)()) writer,STKSIZE,"W2", (void *) 501, 
		    attr, RTTUSR );
  if (temp3 == RTTFAILED) perror("RttCreate");
  
  printf("Reader and Writer processes created\n");
    
  return(0);
}
/*# Dwight Makaroff   */
/*# student number    */
/*# nsid              */
/*# November 7, 2008  */

/* modified slightly October 2018 */



#include <monitor.h>
#include <reader-writer-monitor.h> /* adding the header file */

/* INITIALIZATION CODE */
#define OKtoWrite 1
#define OKtoRead  0
#define numConds  2


static int numReaders = 0;
static int busyWriting =0;

/* MONITOR PROCEDURES */
void Initialize(void)
{
      RttMonInit(numConds);
}

void StartRead()
{
  RttMonEnter();

  /* if there is a writer */
  if (busyWriting)
    {
      RttMonWait(OKtoRead);
    }
  /* once we are signaled, we can continue.
   * There will be at least one reader, so we can be assured
   * that no writers will get to go. No other readers will get
   * to go if we do not signal the rest of the readers, so each
   * reader that wakes up does a signal on OKtoRead. This will be OK
   * since the last signal will have no effect on a late-coming
   * reader.
   */
  numReaders++;
  printf("starting value of numReaders = %d\n", numReaders);
  
  RttMonSignal(OKtoRead);
  
  RttMonLeave();

}

void StopRead()
{
  RttMonEnter();
  numReaders--;
  printf("stopping value of numReaders = %d\n", numReaders);
  /* Only signal the writer when all readers have gone */
  if (numReaders == 0) RttMonSignal(OKtoWrite);
  RttMonLeave();
  
  
}

void StartWrite()
{
  RttMonEnter(); 

  /* if there are any readers or a writer */
  if ((numReaders !=0) || busyWriting)
    RttMonWait(OKtoWrite);
  busyWriting = 1;
  RttMonLeave();
}

void StopWrite()
{
  RttMonEnter();

  busyWriting = 0;

  /* wake up any waiting readers */
  /* this gives priority to readers */
  /* could be a signal to the next writer, if there is one, but
   * then we'd need a mechanism to eventually signal a reader.
   * We couldn't signal a writer and then immediately signal a reader.
  */
  RttMonSignal(OKtoRead);

  RttMonLeave();

}
#ifndef READER_WRITER_MONITOR_H
#define READER_WRITER_MONITOR_H
void Initialize(void);
void StartRead(void);
void StopRead(void);
void StartWrite(void);
void StopWrite(void);
#endif /* READER_WRITER_MONITOR_H */
