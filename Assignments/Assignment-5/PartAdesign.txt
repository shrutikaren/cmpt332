============================= PROBLEM STATEMENT ===============================
This is the design file to indicate the approach that was taken in order to
perform a fair share schedulling algorithm for the xv6. There is currently an
existing scheduler where the interrupt handler shifts to the kernel scheduler.
It basically selects the 1st available process to run. However, with our 
advanced scheduler being implemented, we are having fair shares of the CPU. 
Every process has an assigned quanta that is closed to our predefined share. 

Our queue that will be known as a "ready queue" will keep track of the 
RUNNABLE states. If a process calls in sleep(), the process can't be stored into
a ready queue until it has been successfully woken up. If it is created or 
woken up, it will be added to the end of the ready queue. 

=============================== TESTING FILE ==================================
We have copied the rand() and do_rand() functions from proc.c and utilized it 
into our files. A sqaure function was also created and in the main file, we 
utilize fork() and the square() function to test the threads created inside the
process. 

1. int do_rand(unsigned long *ctx)
	Purpose: Random generating numbers while ensuring that it doesn't 
	overflow out of the 31 bits 

2. int rand(void)
	Purpose: utilizing the do_rand() function and utilzing 1 as the 
	parameter

3. int square (int value)
	Purpose: Producing the squared number of value

4. int main()
	Purpose: We iterate through 10 to obtain 10 threads and for each of
	the thread, we will obtain our PID. If the PID is 0, it is an 
	indication that it is in fact our child process and we will then loop
	to increment our obtained_value variable by getting the square of that
	iteration value. 

=============================== SCHEDULER =====================================
Inside the Makefile, I changed the CPUs to 1 so that my xv6 only runs on one
specific CPU [CPUS:=3 was changed to CPUS:=1]. In my xv6, I am trying to execute
a multi-level feedback queue (MLFQ). Inside my MLFQ, I am having 5 priority 
levels ranging from 0 to 4. When I have my clock ticker as 10 which is 
equivalently equal to 10ms, the highest priority ready process is scheduled to
run. If on a specific level, there is more than one process then I will 
schedule all the processes in a round robin schedulling method which is 
abbreviated as RR. Every priority level has their own amount of clockticks
associated to it. In our case, we will follow the following: 
	- Priority 4: 4 clock ticks
	- Priority 3: 8 clock ticks
	- Priority 2: 16 clock ticks
	- Priority 1: 32 clock ticks
	- Priority 0: Executes the process until completion 

When a new process arives, it should start at priority 3 as a highest priority.
The priorities 4, 3, 2, 1, 0 will be downgraded by one priority after it 
consumes its time-slice. To reduce the problem of starvation, I introduced a 
priority boost and after the process has waited for some amount of time, it will
be raised to the next highest priority. 
