1. MONITOR INITIALIZATION

   Purpose: Initializes monitor's lock, entry semaphore, entry list, and condition variables.

   Pseudocode:
   ------------
   MonInit():
       mon.lock = NewSem(1)
       mon.entryList = ListCreate()
       mon.entrySem = NewSem(1)
       for i in 0 to k-1:
           mon.conVars[i].waitList = ListCreate()
           mon.conVars[i].semaphore = NewSem(0)

2. ENTER MONITOR

   Purpose: Enforce mutual exclusion by acquiring monitor lock and tracking the thread in the entry list.

   Pseudocode:
   ------------
   MonEnter():
       my_pid = MyPid()
       allocate memory for my_pid
       acquire mon.entrySem
       add my_pid to mon.entryList
       release mon.entrySem
       acquire mon.lock
       acquire mon.entrySem
       trimmed_pid = ListTrim(mon.entryList)
       free trimmed_pid
       release mon.entrySem

3. LEAVE MONITOR

   Purpose: Release the monitor lock and signal the next waiting thread if the entry list is not empty.

   Pseudocode:
   ------------
   MonLeave():
       acquire mon.entrySem
       if ListCount(mon.entryList) > 0:
           trimmed_pid = ListTrim(mon.entryList)
           free trimmed_pid
           signal mon.lock
       else:
           release mon.lock
       release mon.entrySem

4. WAIT ON CONDITION VARIABLE

   Purpose: Makes the calling thread wait on a condition variable and releases the monitor lock.

   Pseudocode:
   ------------
   MonWait(cv):
       if cv is not valid:
           error and exit
       
       my_pid = MyPid()
       allocate memory for my_pid
       add my_pid to mon.conVars[cv].waitList
       MonLeave()
       wait on mon.conVars[cv].semaphore
       MonEnter()

5. SIGNAL CONDITION VARIABLE

   Purpose: Signals a thread waiting on the specified condition variable to wake up.

   Pseudocode:
   ------------
   MonSignal(cv):
       if cv is not valid:
           error and exit
       
       if ListCount(mon.conVars[cv].waitList) > 0:
           waiting_pid = ListTrim(mon.conVars[cv].waitList)
           free waiting_pid
           signal mon.conVars[cv].semaphore
