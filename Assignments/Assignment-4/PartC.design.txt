DESIGN DOCUMENT AND PSEUDO CODE FOR S-CHAT

#Shruti Kaur
#ich524
#11339265

OVERVIEW
--------
Application that enables real-time text communication between users. We are 
using the UDP protocol and RT Threads for concurrency.

SYSTEM ARCHITECTURE
-------------------
NOTE: From the given instructions, we are using a Sender/Receiver/Request model 
for coordination.

1. Keyboard Input Thread
2. UDP Input Thread 
3. Screen Output Thread
4. UDP Transmit Thread
5. Server Thread

THREAD RESPONSIBILITIES
-----------------------
1. KEYBOARD INPUT THREAD

    o FUNCTION: Read user input from the keyboard without blocking the main 
      process.

    o OPERATION:
        o Uses non-blocking I/O and the curses library in cbreak mode 
          to read each character as it is typed.
        o Sends characters to the serverThread for processing.

    o SPECIAL SEQUENCE: We plan to use `Ctrl-C` to indicate that the user wants
      to exit the chat.

    PSEUDO CODE:
    ------------
    
    keyboardInputThread():
        while keepRunning:
            char = getch()
            if char != ERROR:
                if char == EXIT_CHARACTER:
                    keepRunning = false
                    signal serverThread to terminate
                else:
                    timestamp = getCurrentTime()
                    characterData = { char, timestamp }
                    acquire mutex on outgoingBuffer
                    outgoingBuffer.enqueue(characterData)
                    release mutex on outgoingBuffer
                    signal conditionVariable for outgoingBuffer
            else:
                sleep(shortDuration)

2. UDP INPUT THREAD

    o FUNCTION: Listens for incoming UDP datagrams from the network.

    o OPERATION:
        o Uses non-blocking sockets to receive messages without blocking 
          other threads.
        o Parses incoming messages and sends them to the serverThread for 
          processing.

    o EXTRA:
        o Handles messages from different architectures (byte order differences).
        o Supports character-by-character display by processing each 
          received character.

    PSEUDO CODE:
    ------------ 
    
    udpInputThread():
        while keepRunning:
            data, addr = recvFromNonBlocking(udpSocket)
            if data is not empty:
                characterData = deserialize(data)
                acquire mutex on incomingBuffer
                incomingBuffer.enqueue(characterData)
                release mutex on incomingBuffer
                signal conditionVariable for incomingBuffer
            else:
                sleep(shortDuration)

3. SCREEN OUTPUT THREAD

    o FUNCTION: Outputs characters to the user's screen.

    o OPERATION:
        o Receives characters from the serverThread.
        o Displays characters in real-time using the curses library.

    o NOTES:
        o Ensure that the display is smooth even with network latency.
        o Handle control characters appropriately.

    PSEUDO CODE:
    ------------

    screenOutputThread():
        while keepRunning:
            acquire mutex on incomingBuffer
            while incomingBuffer.isEmpty():
                wait conditionVariable for incomingBuffer
                if not keepRunning:
                    release mutex on incomingBuffer
                    return
            characterData = incomingBuffer.dequeue()
            release mutex on incomingBuffer
            displayCharacter(characterData.char)

4. UDP TRANSMIT THREAD

    o FUNCTION: Sends data over the network to the remote user.

    o OPERATION:
        o Gets the characters from the serverThread's outgoing buffer.
        o Uses UDP sockets to send characters to the specified remote 
          machine and port.

    o NOTES:
        o Ensure that the characters are being sent in the correct order.
        o Manage network exceptions and retries if necessary.

    PSEUDO CODE:
    ------------

    udpTransmitThread():
        while keepRunning:
            acquire mutex on outgoingBuffer
            while outgoingBuffer.isEmpty():
                wait conditionVariable for outgoingBuffer
                if not keepRunning:
                    release mutex on outgoingBuffer
                    return
            characterData = outgoingBuffer.dequeue()
            release mutex on outgoingBuffer
            data = serialize(characterData)
            sendTo(udpSocket, data, remoteAddress)

5. SERVER THREAD

    o FUNCTION: Coordinates message flow between input/output threads and 
      manages character buffers.

    o OPERATION:
        o Maintains two critical sections:
            o outgoingBuffer: Stores characters from the Keyboard Input Thread 
              to be sent by the UDP Transmit Thread.
            o incomingBuffer: Stores characters from the UDP Input Thread to 
              be displayed by the Screen Output Thread.
        o Manages access to these buffers to prevent race conditions.

    o NOTES:
        o Implement synchronization mechanisms (e.g., mutexes, semaphores) to 
          protect critical sections.
        o Handle buffering when the network or display is slow.

    PSEUDO CODE:
    ------------

    serverThread():
        while keepRunning:
            sleep(shortDuration)
        Clean up resources and signal other threads to terminate

HELPER FUNCTIONS
----------------

getCurrentTime():
    return current time with seconds and microseconds

displayCharacter(char):
    addch(char)  /* from curses library */
    refresh()    /* update the screen */

serialize(character_data):
    /* Convert character_data to a binary format  */
    return binary_data

deserialize(data):
    /* Convert binary data back to character_data structure */
    return character_data


DATA STRUCTURES
---------------
o characterData
    o `char`: The character input by the user.
    o `timestamp`: Time when the character was sent (seconds and microseconds).
    o `fags`: Check for flags


INCLUDES
--------

#include <rtthreads.h>
#include <RttCommon.h>
