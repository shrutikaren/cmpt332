*********************************PHASE ONE*************************************
For Part C, we are to have the following: 
	1. User-defined type LIST and NODE
	2. Functions to manipulate our list 

These functions are provided to us: 
	1. LIST *ListCreate()
	2. int ListCount(list)
	3. void *ListFirst(list)
	4. void *ListLast(list)
	5. void *ListNext(list)
	6. void *ListPrev(list)
	7. void *ListCurr(list)
	8. int ListAdd(list,item)
 	9. int ListInsert(list, item)
  	10. int ListAppend(list, item)
  	11. int ListPrepend(list, item)
  	12. void *ListRemove(list)
  	13. void *ListConcat(list1, list2)
  	14. void ListFree(list, itemFree)
  	15. void *ListTrim(list)
  	16. void *ListSearch(list, comparator, comparisonArg)

We will have the following file names with these functions inside them: 
  1. list_adders.c
      -	 int ListAdd(list,item)
      -  int ListInsert(list, item)
      -  int ListAppend(list, item)
      -  int ListPrepend(list, item)
  2. list_movers.c
      -  int ListCount(LIST *list)
      -  void *ListFirst(LIST *list)
      -  void *ListLast(LIST *list)
      -  void *ListNext(LIST *list)
      -  void *ListPrev(LIST *list)
      -  void *ListCurr(LIST *list)
  3. list_removers.c
      -  void *ListRemove(LIST *list)
      -  void ListConcat(LIST *list1, LIST *list2)
      -  void ListFree(LIST *list, void (*itemFree)(void *))
      -  void *ListTrim(LIST *list)
      -  void *ListSearch(LIST *list, int (*comparator)(void *, void *), void *comparisonArg)
  4. 
During the design of these functions, no use of malloc() has been used as there
cannot be any use of dynamic memory allocation on a per-list or per-node basis. For
this part of the milestone of the assignment, our goal is only to have these 
functions and their skeletons. Throughout this part, it is evaluated if there is 
a correct type and range of arguments being provided. 

*********************************PHASE TWO*************************************
Here, we will continue to bring more precision to our prototypes on how we can 
handle our nodes inside our lists. As the nodes are added into the list, there
will be an increasing amount of memory size. 

*********************************PHASE THREE***********************************

