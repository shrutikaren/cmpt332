#ifndef LIST_H
#define LIST_H

/* Including necessary libraries */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <errno.h>

#define MIN_LISTS 10
#define MIN_NODES 100

/* Logging Errors in our code. */
#define LOG_ERROR(msg) do {                             \
    fprintf(stderr, "Log [Error] - %s: %s at %s:%d\n",  \
        msg, strerror(errno), __FILE__, __LINE__);      \
    exit(EXIT_FAILURE);                                 \
}while(0)

/* Forward declarations */
typedef struct NODE NODE;
typedef struct LIST LIST;

/* Function Prototypes */

/* List creation and management */
LIST *ListCreate(void);
void ListFree(LIST *pList, void (*itemFree)(void *pItem));

/* List properties */
int ListCount(LIST *pList);
void *ListFirst(LIST *pList);
void *ListLast(LIST *pList);
void *ListCurr(LIST *pList);

/* List navigation */
void *ListNext(LIST *pList);
void *ListPrev(LIST *pList);

/* List modification */
int ListAdd(LIST *pList, void *pItem);
int ListInsert(LIST *pList, void *pItem);
int ListAppend(LIST *pList, void *pItem);
int ListPrepend(LIST *pList, void *pItem);
void *ListRemove(LIST *pList);
void ListConcat(LIST *pList1, LIST *pList2);
void *ListTrim(LIST *pList);
void ListDispose(void);

/* List searching */
void *ListSearch(LIST *pList,
                 int (*comparator)(void *, void *), void *pComparisonArg);

/* Internal definitions for implementation files */
#ifdef LIST_IMPLEMENTATION

#define UNUSED_NODE -1

/* NODE structure */
struct NODE {
    void *item;
    int next;
    int prev;
};

/* LIST structure */
struct LIST {
    int head;
    int tail;
    int current;
    int count;
    int inUse;
};

/* Node Pool structure */
typedef struct {
    NODE *nodes;
    int *freeNodes;
    int totalNodes;
    int freeNodeCount;
} NodePool;

/* List Pool structure */
typedef struct {
    LIST *lists;
    int *freeLists;
    int totalLists;
    int freeListCount;
} ListPool;

/* Global pools */
extern NodePool nodePool;
extern ListPool listPool;

/* Function prototypes for internal use */
void initializePools(void);
int allocateNode(void);
void freeNode(int index);
int allocateList(void);
void freeList(int index);

#endif /* LIST_IMPLEMENTATION */

#endif 
#define LIST_IMPLEMENTATION
#include <stdio.h>
#include <stdlib.h>
#include "list.h"

#define UNUSED_NODE -1

NodePool nodePool = {NULL, NULL, 0, 0};
ListPool listPool = {NULL, NULL, 0, 0};

void initializePools(void){

    int i;

    if(nodePool.nodes == NULL){
        nodePool.totalNodes = MIN_NODES;
        nodePool.nodes = malloc(sizeof(NODE) * nodePool.totalNodes);
        nodePool.freeNodes = malloc(sizeof(int) * nodePool.totalNodes);
        for (i = 0; i < nodePool.totalNodes; i++) {
            nodePool.freeNodes[i] = nodePool.totalNodes - i - 1; 
        }
        nodePool.freeNodeCount = nodePool.totalNodes;
    }

    if(listPool.lists == NULL){
        listPool.totalLists = MIN_LISTS;
        listPool.lists = malloc(sizeof(LIST) * listPool.totalLists);
        listPool.freeLists = malloc(sizeof(int) * listPool.totalLists);
        for (i = 0; i < listPool.totalLists; i++) {
            listPool.lists[i].inUse = 0;
            listPool.freeLists[i] = listPool.totalLists - i - 1;
        }
        listPool.freeListCount = listPool.totalLists;
    }

}

/* Allocate a node from the pool */
int allocateNode(void) {

    int i;

    if (nodePool.freeNodeCount == 0) {
        /* Expand node pool */
        int newTotalNodes = nodePool.totalNodes * 2;
        NODE *newNodes = realloc(nodePool.nodes, sizeof(NODE) * newTotalNodes);
        if(newNodes == NULL){
            LOG_ERROR("Failed to realloc nodePool.nodes");
        }

        int *newFreeNodes = realloc(nodePool.freeNodes,
                                    sizeof(int) * newTotalNodes);
        if(newFreeNodes == NULL){
            LOG_ERROR("Failed to realloc nodePool.freeNodes");
        }

        for (i = nodePool.totalNodes; i < newTotalNodes; i++) {
            newFreeNodes[nodePool.freeNodeCount++] = i;
        }
        nodePool.nodes = newNodes;
        nodePool.freeNodes = newFreeNodes;
        nodePool.totalNodes = newTotalNodes;
    }

    return nodePool.freeNodes[--nodePool.freeNodeCount];

}

/* Free a node back to the pool */
void freeNode(int index) {
    nodePool.freeNodes[nodePool.freeNodeCount++] = index;
}

/* Allocate a list from the pool */
int allocateList(void) {

    int i, index;

    if (listPool.freeListCount == 0) {
        /* Expand list pool */
        int newTotalLists = listPool.totalLists * 2;
        LIST *newLists = realloc(listPool.lists,
                                 sizeof(LIST) * newTotalLists);
        int *newFreeLists = realloc(listPool.freeLists,
                                    sizeof(int) * newTotalLists);
        for (i = listPool.totalLists; i < newTotalLists; i++) {
            newLists[i].inUse = 0;
            newFreeLists[listPool.freeListCount++] = i;
        }
        listPool.lists = newLists;
        listPool.freeLists = newFreeLists;
        listPool.totalLists = newTotalLists;
    }
    index = listPool.freeLists[--listPool.freeListCount];
    listPool.lists[index].inUse = 1;
    listPool.lists[index].head = UNUSED_NODE;
    listPool.lists[index].tail = UNUSED_NODE;
    listPool.lists[index].current = UNUSED_NODE;
    listPool.lists[index].count = 0;
    return index;
}

/* Free a list back to the pool */
void freeList(int index) {
    if(index < 0 || index >= listPool.totalLists){
        LOG_ERROR("Attempt to free invalid list index.");
    }
    listPool.lists[index].inUse = 0;
    listPool.freeLists[listPool.freeListCount++] = index;
}

void ListDispose(void){
    if(nodePool.nodes != NULL){
        free(nodePool.nodes);
        nodePool.nodes = NULL;
    }

    if(nodePool.freeNodes!= NULL){
        free(nodePool.freeNodes);
        nodePool.freeNodes = NULL;
    }

    if(listPool.lists!= NULL){
        free(listPool.lists);
        listPool.lists = NULL;
    }

    if(listPool.freeLists!= NULL){
        free(listPool.freeLists);
        listPool.freeLists = NULL;
    }
}

LIST *ListCreate(void){
    
    int index;
    initializePools();
    index = allocateList();
    if(index < 0){
        return NULL;
    }

    return &listPool.lists[index];

}

int ListAdd(LIST *pList, void *pItem){

    int newNodeIndex;
    if(pList == NULL){ return EXIT_FAILURE; }

    initializePools();
    newNodeIndex = allocateNode();

    nodePool.nodes[newNodeIndex].item = pItem;
    nodePool.nodes[newNodeIndex].next = UNUSED_NODE;
    nodePool.nodes[newNodeIndex].prev = UNUSED_NODE;

    if(pList->count == 0){
        pList->head = pList->tail = pList->current = newNodeIndex;
    }

    else if (pList->current == UNUSED_NODE){
        nodePool.nodes[newNodeIndex].prev = pList->tail;
        nodePool.nodes[newNodeIndex].next = UNUSED_NODE;
        nodePool.nodes[pList->tail].next = newNodeIndex;
        pList->tail = pList->current = newNodeIndex;
        pList->current = newNodeIndex;
    }

    else{
        int nextNode = nodePool.nodes[pList->current].next;
        nodePool.nodes[newNodeIndex].prev = pList->current;
        nodePool.nodes[newNodeIndex].next = nextNode;
        nodePool.nodes[pList->current].next = newNodeIndex;
        if (nextNode != UNUSED_NODE) {
            nodePool.nodes[nextNode].prev = newNodeIndex;
        }
        else{
            pList->tail = newNodeIndex;
        }
        pList->current = newNodeIndex;
    }
    pList->count++;
            
    return EXIT_SUCCESS;
}

int ListInsert(LIST *pList, void *pItem){

    int newNodeIndex;
    if(pList == NULL || !pList->inUse){
        return EXIT_FAILURE;
    }

    newNodeIndex = allocateNode();
    nodePool.nodes[newNodeIndex].item = pItem;
    nodePool.nodes[newNodeIndex].next = UNUSED_NODE;
    nodePool.nodes[newNodeIndex].prev = UNUSED_NODE;

    if(pList->count == 0){
        pList->head = pList->tail = pList->current = newNodeIndex;
    }
    else if (pList->current == UNUSED_NODE){
        nodePool.nodes[newNodeIndex].next = pList->head;
        nodePool.nodes[pList->head].prev = newNodeIndex;
        pList->head = pList->current = newNodeIndex;
    }
    else{
        int prevNode = nodePool.nodes[pList->current].prev;
        nodePool.nodes[newNodeIndex].next = pList->current;
        nodePool.nodes[newNodeIndex].prev = prevNode;
        nodePool.nodes[pList->current].prev = newNodeIndex;
        if(prevNode != UNUSED_NODE){
            nodePool.nodes[prevNode].next = newNodeIndex;
        }else{
            pList->head = newNodeIndex;
        }
        pList->current = newNodeIndex;
    }
    pList->count++;
    return EXIT_SUCCESS;
}

int ListAppend(LIST *pList, void *pItem){
    if(pList == NULL){
        return EXIT_FAILURE;
    }
    pList->current = pList->tail;
    return ListAdd(pList, pItem);
}

int ListPrepend(LIST *pList, void *pItem){
    if(pList == NULL){
        return EXIT_FAILURE;
    }
    pList->current = pList->head;
    return ListInsert(pList, pItem);
}

void ListConcat(LIST *pList1, LIST *pList2){

    if(pList1 == NULL || pList2 == NULL){
        return;
    }

    if(pList2->count == 0){
        freeList(pList2 - listPool.lists);
        return;
    }

    if(pList1->count == 0){
        pList1->head = pList2->head;
        pList1->tail = pList2->tail;
        pList1->current = pList2->current;
        pList1->count = pList2->count;
    }
    else{
        nodePool.nodes[pList1->tail].next = pList2->head;
        nodePool.nodes[pList2->head].prev = pList1->tail;
        pList1->tail = pList2->tail;
        pList1->count += pList2->count;
        pList1->current = pList2->current;
    }

    pList2->head = pList2->tail = pList2->current = UNUSED_NODE;
    pList2->count = 0;
    pList2->inUse = 0;

    freeList(pList2 - listPool.lists);

}
#define LIST_IMPLEMENTATION
#include <stdlib.h>
#include <list.h>

#define UNUSED_NODE -1

/* Extern pools from list_adders.c */
extern NodePool nodePool;
extern ListPool listPool;

/* Get the count of items in the list */
int ListCount(LIST *pList) {
    if(pList == NULL || !pList->inUse){
        return EXIT_FAILURE;
    }
    return pList->count;
}

/* Move current to the first item */
void *ListFirst(LIST *pList) {
    if(pList == NULL || pList->head == UNUSED_NODE){
        return NULL;
    }
    pList->current = pList->head;
    return nodePool.nodes[pList->current].item;
}

/* Move current to the last item */
void *ListLast(LIST *pList) {
    if(pList == NULL || pList->tail == UNUSED_NODE){
        return NULL;
    }
    pList->current = pList->tail;
    return nodePool.nodes[pList->current].item;
}

/* Return the current item */
void *ListCurr(LIST *pList) {
    if(pList == NULL || pList->current == UNUSED_NODE){
        return NULL;
    }
    return nodePool.nodes[pList->current].item;
}

/* Move current to the next item */
void *ListNext(LIST *pList) {
    int nextNode;
    if(pList == NULL || pList->current == UNUSED_NODE){
        return NULL;
    }
    nextNode = nodePool.nodes[pList->current].next;
    if(nextNode == UNUSED_NODE){
        pList->current = UNUSED_NODE;
        return NULL;
    }
    pList->current = nextNode;
    return nodePool.nodes[pList->current].item;
}

/* Move current to the previous item */
void *ListPrev(LIST *pList) {
    int prevNode;
    if(pList == NULL || pList->current == UNUSED_NODE){
        return NULL;
    }
    prevNode = nodePool.nodes[pList->current].prev;
    if(prevNode == UNUSED_NODE){
        pList->current = UNUSED_NODE;
        return NULL;
    }
    pList->current = prevNode;
    return nodePool.nodes[pList->current].item;
}

/* Search the list starting from current */
void *ListSearch(LIST *pList,
                 int (*comparator)(void *, void *), void *pComparisonArg) {

    int nodeIndex; 

    if(pList == NULL || comparator == NULL){
        return NULL;
    }
    
    nodeIndex = pList->current;
    
    while (nodeIndex != UNUSED_NODE) {
        void* item = nodePool.nodes[nodeIndex].item;
        if(comparator(item,pComparisonArg) == 1){
            pList->current = nodeIndex;
            return item;
        }
        nodeIndex = nodePool.nodes[nodeIndex].next;
    }
    
    pList->current = UNUSED_NODE;
    
    return NULL;

}
#define LIST_IMPLEMENTATION
#include <stdlib.h>
#include "list.h"

#define UNUSED_NODE -1

/* Extern pools from list_adders.c */
extern NodePool nodePool;
extern ListPool listPool;

/* Remove the current item */
void *ListRemove(LIST *pList) {

    int nodeIndex, prevNode, nextNode;
    void* item;

    if(pList == NULL || pList->current == UNUSED_NODE){
        return NULL;
    }

    nodeIndex = pList->current;
    item = nodePool.nodes[nodeIndex].item;
    prevNode = nodePool.nodes[nodeIndex].prev;
    nextNode = nodePool.nodes[nodeIndex].next;

    if(prevNode != UNUSED_NODE){
        nodePool.nodes[prevNode].next = nextNode;
    }
    else{
        pList->head = nextNode;
    }

    if(nextNode != UNUSED_NODE){
        nodePool.nodes[nextNode].prev = prevNode;
    }
    else{
        pList->tail = prevNode;
    }

    if(nextNode != UNUSED_NODE){
        pList->current = nextNode;
    }
    else if (prevNode != UNUSED_NODE){
        pList->current = prevNode;
    }
    else{
        pList->current = UNUSED_NODE;
    }

    freeNode(nodeIndex);
    pList->count--;

    return item;

}

/* Remove and return the last item */
void *ListTrim(LIST *pList) {
    if(pList == NULL || pList->tail == UNUSED_NODE){
        return NULL;
    }
    pList->current = pList->tail;
    return ListRemove(pList);
}

/* Free the list and its nodes */
void ListFree(LIST *pList, void (*itemFree)(void *pItem)) {

    int nodeIndex, listIndex;
    
    if(pList == NULL){ return; }

    nodeIndex = pList->head;

    while (nodeIndex != UNUSED_NODE) {

        int nextNode = nodePool.nodes[nodeIndex].next;
        if(itemFree != NULL && nodePool.nodes[nodeIndex].item != NULL){
            itemFree(nodePool.nodes[nodeIndex].item);
        }
        freeNode(nodeIndex);
        nodeIndex = nextNode;

    }

    /* Reset the list's pointers */
    pList->head = UNUSED_NODE;
    pList->tail = UNUSED_NODE;
    pList->current = UNUSED_NODE;
    pList->count = 0;
    pList->inUse = 0;

    /* Return the list to the pool */
    listIndex = pList - listPool.lists;
    freeList(listIndex);
  
}
